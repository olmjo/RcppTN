% -*- mode: noweb; ess-noweb-default-code-mode: R; ess-noweb-doc-mode: LaTeX-mode; -*-

% \VignetteEngine{knitr::knitr}
% \VignetteIndexEntry{Using RcppTN}
% \VignetteKeyword{RNG}
% \VignetteDepends{ggplot2, Rcpp}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PREAMBLE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% CLASS %%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[11pt,letterpaper]{article}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%% PACKAGES %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage[T1]{fontenc}

\usepackage{graphicx}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{hyperref}
\usepackage[top=1in,left=1in,bottom=1in,right=1in]{geometry}
\usepackage{fancyhdr}

\newcommand{\R}{\textsf{R}}
\newcommand{\Cpp}{\textsf{C++}}
\newcommand{\RcppTN}{\textbf{RcppTN}}
\newcommand{\Rcpp}{\textbf{Rcpp}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%% SETTINGS %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagestyle{fancy}
\lhead{}
\chead{Using \RcppTN{} in \R{} and \Cpp{}}
\rhead{}
\cfoot{\thepage}

\author{Jonathan Olmsted\\
  \texttt{jpolmsted@gmail.com}
}
\title{Using \RcppTN{} in \R{} and \Cpp{}}
\date{March 28, 2014}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CONTENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\maketitle

\thispagestyle{plain}

This brief document shows simple usage of the function \texttt{rtn()} provided
by the \R{} package \RcppTN{} for drawing from an arbitrary sequence of
truncated Normal distributions. Much of the value added by the \RcppTN{} package
comes from providing a \Cpp{}-level API to call in development of other
\Rcpp{}-based \Cpp{} codes. Use of this API is also demonstrated.  While no
other \R{} packages currently provide this functionality in an API, some
existing implementations for drawing from a truncated Normal distribution at the
\R{}-level include \textbf{truncnorm} and \textbf{msm}.

\section{Installation}

Currently, there is no CRAN version of the package, so the simplest installation
mechanism is using the \texttt{install\_github()} function from the
\texttt{devtools} package.

<<eval=FALSE>>=
library(devtools)
install_github("RcppTN", username = "olmjo", subdir = "pkg")
@

\section{\R{}-level Usage}

Usage of the \texttt{rtn()} function in \R{} is straightforward (albeit not
feature-rich). Without any options, we get a single draw from the standard
Normal distribution. And, this draw respects R's RNG state so the stream of
output is reproducible.

<<>>=
library(RcppTN)
set.seed(1)
rtn()
set.seed(1)
rtn()
@

Under this implementation of the Robert (1995) algorithm, a request for a single
draw from a Standard Normal distribution truncated from $-\infty$ to $\infty$
--- the default behavior of the function when called without any arguments ---~
results in the same return value as a single draw from a Standard Normal
distribution using \texttt{rnorm()}. This is just a by-product of the
implementation and holds no practical significance.\footnote{See the R package
  documentation for the citation to the algorithm.}

<<>>=
set.seed(1)
rtn()
set.seed(1)
rtn(.mean = 0, .sd = 1, .low = -Inf, .high = Inf)
set.seed(1)
rtn()
set.seed(1)
rnorm(1)
@

Of course, \texttt{rtn()}'s behavior given RNG seeds is exactly as you would
expect for any other generator in \textbf{R}.

<<>>=
set.seed(11)
rtn()
rtn()
set.seed(1)
rtn()
rtn()
set.seed(11)
rtn()
rtn()
@

\noindent In practice, this \textbf{R}-level function will likely be used in one
of two ways:

\begin{enumerate}
\item drawing many values from the same truncated Normal distribution
\item drawing many values from different truncated Normal distributions
\end{enumerate}

\noindent For the \texttt{rtn()} function, these two uses look very similar. The
function accepts a \texttt{.mean} argument, an \texttt{.sd} argument, a
\texttt{.low} argument, and a \texttt{.high} argument. Each should be a vector
of length $K$ corresponding to the $K$ distributions of interest. The function
does not handle value recycling for the user, so the construction of these
vectors must be done \textit{before or during} the call of the \texttt{rtn()}
function. Incorrectly sized inputs result in an error.

<<eval = FALSE>>=
## Not Run -- will cause error
rtn(.mean = c(0, 1), .sd = 1)
@


Importantly, this function returns an \texttt{NA} value for draws corresponding
to invalid input parameters along with a warning. \texttt{NA}-inducing input
parameters don't interfere with other valid parameters and a vector of the
requested length is returned.

For example,

<<tidy=FALSE>>=
rtn(0, -1, 0, 1)
rtn(0, 1, 0, -1)
rtn(c(0,0), c(1,1), c(0,0), c(-Inf,Inf))
@

To suppress input and output checks, use the following:

<<eval = FALSE>>=
## Not Run -- no warning given
rtn(0, -1, 0, 1, .checks = FALSE)
@

However, this is not recommended unless inputs are being checked before use.
Skipping checks in \texttt{rtn()} provides a slight performance advantage, but
most applications will benefit more from safer code.

\subsection{Multiple Draws from a Single Distribution}

Multiple draws from the same distribution may be requested with a function call
like the following:

<<tidy=FALSE>>=
set.seed(1)
output <- rtn(.mean = rep(0, 1000),
              .sd = rep(1, 1000),
              .low = rep(1, 1000),
              .high = rep(2, 1000)
              )
length(output)
mean(output)
@

Here, we are generating 1,000 draws, with each draw, $x$, coming from $N(0, 1)$
truncated below at 1 and above at 2. The population mean of this distribution is
\[
E[x] = \mu +
\frac{\phi(\frac{a - \mu}{\sigma}) - \phi(\frac{b - \mu}{\sigma})}{\Phi(\frac{b - \mu}{\sigma}) - \Phi(\frac{a-\mu}{\sigma})}
\cdot \sigma,
\]

where $\mu=0$, $\sigma=1$, $\phi$ denotes the pdf of the standard Normal
distribution, $\Phi$ denotes the standard cdf of the standard Normal
distribution, and $a$ and $b$ are the lower and upper bounds of truncation,
respectively. So, for the above parameter values we have

\begin{align*}
  E[x]
  &= \mu +
  \frac{\phi(\frac{a - \mu}{\sigma}) - \phi(\frac{b - \mu}{\sigma})}{\Phi(\frac{b - \mu}{\sigma}) - \Phi(\frac{a-\mu}{\sigma})}
  \cdot \sigma \\
  &= 0 + \frac{.242 - .054}{.977 - .841}\cdot 1 \\
  &\approx 1.383
\end{align*}

Our sample mean for the 1,000 draws (1.389) is close to the population mean
(1.383). To get a better sense of how dispersed the sampling distribution for
the mean of a sample of 1,000 draws from this distribution is, we can simulate
it.

<<tidy=FALSE, out.height = ".7\\textwidth", out.width= ".7\\textwidth">>=
bigoutput <- rep(NA, 1000)
for (i in 1:length(bigoutput)) {
    bigoutput[i] <- mean(rtn(.mean = rep(0, 1000),
                             .sd = rep(1, 1000),
                             .low = rep(1, 1000),
                             .high = rep(2, 1000)
                             )
                         )
}
summary(bigoutput)
@

Looking at the summary of the sample means, we see that the sampling
distribution of sample means is centered directly on the population mean.

As shown above, valid input for \texttt{rtn()} includes \texttt{-Inf} and
\texttt{Inf}. Below are histograms for four different truncated Normal
distributions. The \texttt{rtn()} function works perfectly well in simulating
draws from regions that have a low (read nearly 0) density in a non-truncated
Normal distribution. Distribution ``D'' is an example of this.

\begin{center}
<<"diffdists", tidy=FALSE, out.height = ".7\\textwidth", out.width= ".7\\textwidth", message=FALSE>>=
library(ggplot2)
outputA <- rtn(.mean = rep(0, 5000),
               .sd = rep(1, 5000),
               .low = rep(-1, 5000),
               .high = rep(Inf, 5000)
               )
outputB <- rtn(.mean = rep(0, 5000),
               .sd = rep(1, 5000),
               .low = rep(0, 5000),
               .high = rep(1, 5000)
               )
outputC <- rtn(.mean = rep(0, 5000),
               .sd = rep(1, 5000),
               .low = rep(-Inf, 5000),
               .high = rep(Inf, 5000)
               )
outputD <- rtn(.mean = rep(0, 5000),
               .sd = rep(1, 5000),
               .low = rep(5, 5000),
               .high = rep(Inf, 5000)
               )

dfOutput <- rbind(data.frame(value = outputA, dist = "A"),
                  data.frame(value = outputB, dist = "B"),
                  data.frame(value = outputC, dist = "C"),
                  data.frame(value = outputD, dist = "D")
                 )

ggplot(dfOutput) +
    geom_histogram(aes(x=value,
                       y=..density..,
                       fill = dist
                       ),
                   alpha = 1/3,
                   position = "identity"
                   )
@
\end{center}

\subsection{Multiple Draws from Different Distributions}

Taking multiple draws from different distributions proceeds in a similar way,
though the construction of the arguments passed to \texttt{rtn()} changes a
bit. If we were interested in characterizing a distribution of draws from a
truncated Normal distribution where one (or more) of the parameters was, itself,
stochastic, \texttt{rtn()} could easily be put to use. Here, the vector of lower
bounds and upper bounds are each the result of an \texttt{rtn()} function call
(notice that $a < b$ by construction).

Then, we cam sample 1,000 draws from this truncated Normal distribution of
interest where the mean and standard deviation are fixed, but the bounds of
truncation, themselves, are taken from a distribution (in this case, a truncated
Normal distribution).

\begin{center}
<<"randombounds", tidy=FALSE, out.height = ".65\\textwidth", out.width= ".65\\textwidth", message=FALSE>>=
lows <- rtn(rep(0, 1000),
            rep(3, 1000),
            rep(-10, 1000),
            rep(3, 1000)
            )
highs <- rtn(rep(0, 1000),
             rep(3, 1000),
             rep(3, 1000),
             rep(4, 1000)
             )
all(lows < highs)

outputD <- rtn(.mean = rep(0, 1000),
               .sd = rep(3, 1000),
               .low = lows,
               .high = highs
               )

ggplot() +
    geom_histogram(aes(x = outputD))

@
\end{center}

This sampling distribution is non-standard and the easiest way to characterize
it would be through a simulation like the above.

\section{\Cpp{}-level Usage}

This section documents how to use the \Cpp{}-level functionality in
subsequent \Cpp{} development. Specifically, using the \RcppTN{}
\Cpp{} API via \verb=sourceCpp()= and an \Rcpp{}-based \R{} package
are shown. Presently, only two functions are exposed at the \Cpp{}
level: \texttt{rtn1()} and \texttt{etn1()}.

\begin{description}
\item[\textsf{rtn1}] ~
\begin{verbatim}
double rtn1(double mean, double sd, double low, double high) ;
\end{verbatim}

\item[\textsf{etn1}] ~
\begin{verbatim}
double etn1(double mean, double sd, double low, double high) ;
\end{verbatim}

\item[\textsf{vtn1}] ~
\begin{verbatim}
double vtn1(double mean, double sd, double low, double high) ;
\end{verbatim}

\item[\textsf{dtn1}] ~
\begin{verbatim}
double dtn1(double x, double mean, double sd, double low, double high) ;
\end{verbatim}

\end{description}

\paragraph{Caveats. }The \R{}-level function ultimately calls these
\Cpp{}-level functions. So, all of the features of the \R{}-level
function apply here (e.g., respecting \R{}' RNG state). However, as is
true in \Rcpp{}, this is left to the user to enforce. No checking or
error handling is provided with these functions. These functions live
in the \texttt{RcppTN} namespace.

\subsection{Examples}

\paragraph{Via \texttt{sourceCpp()}.} In non-package \R{} code, use is
very straightforward due to the mechanisms provided by
\Rcpp{}. Include the appropriate header file as you would for
\Rcpp{}. In addition, use the depends pseudo-attribute with
``\verb=// [[Rcpp::depends(RcppTN)]]='' to ensure that linker finds
the symbols. From there, use is as you would expect.

<<tidy = FALSE>>=
library(Rcpp)
sourceCpp(code = "
#include <Rcpp.h>

#include <RcppTN.h>
// [[Rcpp::depends(RcppTN)]]

using namespace Rcpp ;

// [[Rcpp::export]]
List rcpp_hello_world() {
  double a = RcppTN::rtn1(0.0, 1.0, 3.5, 3.7) ;
  double b = RcppTN::etn1(0.0, 1.0, 3.5, 3.7) ;
  double c = RcppTN::vtn1(0.0, 1.0, 3.5, 3.7) ;
  double d = RcppTN::dtn1(3.6, 0.0, 1.0, 3.5, 3.7) ;
  NumericVector y = NumericVector::create(a, b, c, d) ;
  List z = List::create(y) ;
  return(z) ;
}
"
          )

rcpp_hello_world()
@

\paragraph{Via an Rcpp-based package.} In \R{}, use
\texttt{Rcpp.package.skeleton()} from \Rcpp{} to create an empty, but
functional, \R{} package.

<<eval=FALSE>>=
library(Rcpp)
Rcpp.package.skeleton(path="~/Desktop")
@

Navigate inside the newly created \texttt{anRpackage} directory and edit the
\texttt{DESCRIPTION} file. Add \texttt{RcppTN} to the \texttt{Depends:} and
\texttt{LinkingTo:} lines of the file as in
\begin{verbatim}
Depends: Rcpp (>= 0.10.5), RcppTN
LinkingTo: Rcpp, RcppTN
\end{verbatim}

Now, edit the \Cpp{} function \texttt{rcpp\_hello\_world()} in
\texttt{anRpackage/src/rcpp\_hello\_world.cpp} to read
\begin{verbatim}
#include <Rcpp.h>
#include <RcppTN.h>

using namespace Rcpp;

// [[Rcpp::export]]
List rcpp_hello_world() {
  double a = RcppTN::rtn1(0.0, 1.0, 3.5, 3.7) ;
  double b = RcppTN::etn1(0.0, 1.0, 3.5, 3.7) ;
  double c = RcppTN::vtn1(0.0, 1.0, 3.5, 3.7) ;
  NumericVector y = NumericVector::create( a, b, c ) ;
  List z = List::create( y ) ;
  return(z) ;
}
\end{verbatim}

To see the effect of this, install the ``anRpackage'' package and the
load it in \R{}. From there, make subsequent calls to the
\texttt{rcpp\_hello\_world()} function. With a similar approach, the
\texttt{rtn1()} function can be called in a more useful way within
other \Cpp{}-level codes without the need for re-coding the wheel. The
only difference between this approach and the \texttt{sourceCpp()}
approach is that the \texttt{depends} pseudo-attribute is no longer
needed and is replaced by the modification to the \texttt{LinkingTo:}
field of the \texttt{DESCRIPTION} file.
\end{document}

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
