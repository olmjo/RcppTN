// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "../inst/include/RcppTN.h"
#include <string>
#include <set>

using namespace Rcpp;

// etn1
double etn1(const double mean, const double sd, const double low, const double high);
static SEXP RcppTN_etn1_try(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const double >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< const double >::type sd(sdSEXP );
        Rcpp::traits::input_parameter< const double >::type low(lowSEXP );
        Rcpp::traits::input_parameter< const double >::type high(highSEXP );
        double __result = etn1(mean, sd, low, high);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppTN_etn1(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RcppTN_etn1_try(meanSEXP, sdSEXP, lowSEXP, highSEXP));
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// rtn1
double rtn1(const double mean, const double sd, const double low, const double high);
static SEXP RcppTN_rtn1_try(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const double >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< const double >::type sd(sdSEXP );
        Rcpp::traits::input_parameter< const double >::type low(lowSEXP );
        Rcpp::traits::input_parameter< const double >::type high(highSEXP );
        double __result = rtn1(mean, sd, low, high);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppTN_rtn1(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RcppTN_rtn1_try(meanSEXP, sdSEXP, lowSEXP, highSEXP));
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// vtn1
double vtn1(const double mean, const double sd, const double low, const double high);
static SEXP RcppTN_vtn1_try(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const double >::type mean(meanSEXP );
        Rcpp::traits::input_parameter< const double >::type sd(sdSEXP );
        Rcpp::traits::input_parameter< const double >::type low(lowSEXP );
        Rcpp::traits::input_parameter< const double >::type high(highSEXP );
        double __result = vtn1(mean, sd, low, high);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppTN_vtn1(SEXP meanSEXP, SEXP sdSEXP, SEXP lowSEXP, SEXP highSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RcppTN_vtn1_try(meanSEXP, sdSEXP, lowSEXP, highSEXP));
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int RcppTN_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*etn1)(const double,const double,const double,const double)");
        signatures.insert("double(*rtn1)(const double,const double,const double,const double)");
        signatures.insert("double(*vtn1)(const double,const double,const double,const double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RcppTN_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppTN", "RcppTN_etn1", (DL_FUNC)RcppTN_etn1_try);
    R_RegisterCCallable("RcppTN", "RcppTN_rtn1", (DL_FUNC)RcppTN_rtn1_try);
    R_RegisterCCallable("RcppTN", "RcppTN_vtn1", (DL_FUNC)RcppTN_vtn1_try);
    R_RegisterCCallable("RcppTN", "RcppTN_RcppExport_validate", (DL_FUNC)RcppTN_RcppExport_validate);
    return R_NilValue;
}
